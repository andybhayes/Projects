from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.properties import ObjectProperty
from random import randint

class MathGame(BoxLayout):

    num_questions = ObjectProperty()
    difficulty = ObjectProperty()

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.orientation = "vertical"
        
        # Main menu buttons
        self.menu_buttons = BoxLayout()
        self.add_button = Button(text="Addition")
        self.sub_button = Button(text="Subtraction")
        self.mul_button = Button(text="Multiplication")
        self.menu_buttons.add_widget(self.add_button)
        self.menu_buttons.add_widget(self.sub_button)
        self.menu_buttons.add_widget(self.mul_button)
        self.add_widget(self.menu_buttons)

        # Bind buttons to functions
        self.add_button.bind(on_press=self.start_add)
        self.sub_button.bind(on_press=self.start_sub)
        self.mul_button.bind(on_press=self.start_mul)

        # Other attributes
        self.questions = []
        self.score = 0

    def start_add(self, instance):
        self.start_game("A")

    def start_sub(self, instance):
        self.start_game("S")

    def start_mul(self, instance):
        self.start_game("M")

    def start_game(self, _type):
        # Clear previous game
        self.clear_widgets()

        # Ask number of questions
        self.add_widget(Label(text="How many questions?"))
        self.num_questions = TextInput()
        self.add_widget(self.num_questions)

        # Ask difficulty
        self.add_widget(Label(text="Difficulty (1-3)?"))
        self.difficulty = TextInput()
        self.add_widget(self.difficulty)

        # Start button
        start_button = Button(text="Start")
        start_button.bind(on_press=lambda instance: self.generate_questions(_type))
        self.add_widget(start_button)

    def generate_questions(self, _type):
        # Clear widgets
        self.clear_widgets()

        # Generate questions
        n = int(self.num_questions.text)
        d = int(self.difficulty.text)
        
        for i in range(n):
            if _type == "A":
                x = randint(1, 9) if d == 1 else randint(11, 99) if d == 2 else randint(111, 999)
                y = randint(1, 9) if d == 1 else randint(11, 99) if d == 2 else randint(111, 999)
                q = f"{x} + {y} ="
            elif _type == "S":
                x = randint(1, 9) if d == 1 else randint(11, 99) if d == 2 else randint(111, 999)
                y = randint(1, 9) if d == 1 else randint(11, 99) if d == 2 else randint(111, 999)
                q = f"{x} - {y} ="
            elif _type == "M":
                x = randint(1, 9) if d == 1 else randint(11, 99) if d == 2 else randint(111, 999)
                y = randint(1, 9) if d == 1 else randint(11, 99) if d == 2 else randint(111, 999)
                q = f"{x} * {y} ="

            self.questions.append((q, x + y))

        # Display questions
        for q in self.questions:
            self.add_widget(Label(text=q[0]))
            self.answer = TextInput()
            self.add_widget(self.answer)

        # Submit button
        submit = Button(text="Submit")
        submit.bind(on_press=lambda instance: self.check_answers(_type))
        self.add_widget(submit)

    def check_answers(self, _type):
        # Check answers and display score
        for q, ans in self.questions:
            if int(self.answer.text) == ans:
                self.score += 1
        
        score_label = Label(text=f"You scored {self.score}/{len(self.questions)}!")
        self.add_widget(score_label)

        # Add button to play again
        play_again = Button(text="Play Again")
        play_again.bind(on_press=lambda instance: self.reset(_type))
        self.add_widget(play_again)

    def reset(self, _type):
        self.score = 0
        self.start_game(_type)

class MathGameApp(App):
    def build(self):
        return MathGame()

if __name__ == "__main__":
    MathGameApp().run()
